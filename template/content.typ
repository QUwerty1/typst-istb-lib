#import "../lib.typ": xlsx_tab, img

#let content = [

  = Введение

  В процессе изучения дисциплины «Объектно-ориентированное программирование» мы детально освоили методологию объектной декомпозиции сложных задач, позволяющую разбивать их на управляемые сущности, а также фундаментальные принципы ООП: инкапсуляцию, наследование, полиморфизм. Полученные теоретические знания и навыки были успешно применены на практике при разработке и реализации программ для решения конкретных прикладных задач.

  Целью курсового проекта является закрепление полученных знаний. В ходе его выполнения необходимо разработать REST API приложение с использованием фреймворка Spring Boot @bib:spring-boot и СУБД PostgreSQL @bib:pgsql для организации совместного ведения заметок внутри небольших групп.



  #pagebreak()
  == Анализ задания и описание предметной области
  === Описание предметной области

  Предметная область: организация работы и хранение информации в коллективах.

  Целевая аудитория: небольшие коллектив (около 10 человек)
  Проблема: Большинство сервисов, предоставляющих возможность организации совместной работы, имеют бесплатный тариф только для команд до 5 человек.

  Словарь предметной области:

  + "Заметка" – объект, хранящий информацию, организованную в определенном виде: текстовом, табличном, календарном;
  + "Блокнот" – объект, хранящий в себе заметки. Служит для разделения заметок по категориям, подгруппам и т.д.
  + "Сервер заметок" – веб-приложение, которое обеспечивает хранение блокнотов и управление ими в рамках одной группы;

  Для более возможности удобного структурирования информации необходимо реализовать 3 вида заметок:

  + Текстовые;
  + Табличные;
  + Календарные.

  Для возможности разделения доступа к блокнотам и заметкам должно существовать 3 типа доступа:

  + Читатель;
  + Редактор;
  + Админ.

  Типы доступа для блокнотов:

  + Читатель:
    + Может просматривать информацию о блокноте и заметки в нем;
  + Редактор:
    + Может то же, что и читатель;
    + Может изменять название блокнота;
    + Может добавлять новые заметки (создатель заметки по умолчанию является ее админом);
  + Админ:
    + Может то же, что и редактор;
    + Может изменять типы доступа других людей к блокноту;
    + Владелец блокнота по умолчанию является админом, и его тип доступа не может быть изменен;

  Типы доступа для заметок:

  + Читатель:
    + Может просматривать содержимое заметки;
  + Редактор:
    + Может то же, что и читатель;
    + Может изменять содержимое заметки;
    + Может удалить заметку;
    + Может изменить название заметки;
  + Админ:
    + Может то же, что и редактор;
    + Может изменять типы доступа других пользователей к заметке.

  Если пользователь является админом блокнота, то он так же является админом всех заметок в этом блокноте, и его тип доступа не может быть изменен.

  Для совместного доступа к заметкам используется механизм блокировок: если пользователь хочет изменить заметку, то он сначала должен заблокировать ее. В это время остальные могут только просматривать информацию из нее, но не изменять. По завершении редактирования блокировку необходимо снять.



  === Требования к системе

  Функциональные требования к веб-приложению:

  + Аутентификация пользователей по логину и паролю с использованием JWT;
  + Возможность создания, удаления, изменения блокнотов;
  + Возможность создания, удаления, изменения заметок.
  + Возможность получение списка пользователей, зарегистрированных на сервере заметок;
  + Возможность получение списка пользователей, имеющих доступ к блокноту/заметке;
  + Система ролей для блокнотов и заметок с 3-я типами доступа (Админ, Читатель, Редактор);
  + Возможность создания 3-ех типов заметок (текстовая, табличная, календарная);
  + Возможность получения списка блокнотов, доступных пользователю;
  + Возможность получения заметок в блокноте.
  + Возможность блокировки редактирования заметки для всех пользователей, пока один ее изменяет;

  Работа веб-приложения осуществляется при помощи фреймворка Spring Boot. Получение и отправка данных – посредством REST API. За хранение данных отвечает СУБД PostgreSQL 17. Для отладки работы используется Postman. Для создания API-контрактов используется OpenAPI 3.0.3.



  #pagebreak()
  == Проектирование приложения
  === Проектирование базы данных

  + Пользователь
    + Логин -- имя для входа в систему
    + Почта -- электронный адрес
    + Пароль -- зашифрованный пароль
  + Блокнот
    + Название -- имя блокнота
    + Дата создания -- когда был создан
    + Дата обновления -- когда последний раз изменялся
    + Владелец -- ссылка на Пользователя
  + Заметка
    + Название -- имя заметки
    + Дата создания -- когда была создана
    + Дата обновления -- когда последний раз изменялась
    + Владелец -- ссылка на Пользователя
    + Заблокирована пользователем -- кто запретил редактирование (если есть)
  + Табличная заметка
    + Названия столбцов -- заголовки таблицы (в формате JSON)
    + Ячейки -- данные таблицы (в формате JSON)
    + Родительская заметка -- ссылка на Заметку
  + Текстовая заметка
    + Идентификатор -- уникальный номер
    + Текст -- содержимое
    + Родительская заметка -- ссылка на Заметку
  + Календарная заметка
    + События календаря -- даты и описания (в формате JSON)
    + Родительская заметка -- ссылка на Заметку
  + Роль
    + Название -- например, "Администратор", "Редактор"
  + Доступ к заметке
    + Тип доступа -- например, "Чтение" или "Редактирование"
    + Заметка -- ссылка на Заметку
    + Пользователь -- ссылка на Пользователя
  + Доступ к блокноту
    + Тип доступа -- аналогично Доступу к заметке
    + Блокнот -- ссылка на Блокнот
    + Пользователь -- ссылка на Пользователя



  #pagebreak()
  #set page(flipped: true)
  \ \ \
  #img(
    path: "/template/assets/images/ERD.svg",
    caption: "Диаграмма сущность-связь",
    label: <img:erd>,
  )


  #pagebreak()
  === Описание API-контракта
  #xlsx_tab(
    "/template/assets/tables/openapi_endpoints.xlsx",
    caption: "Описание API-контракта",
    columns: 7,
    label: <tab:openapi-endpoints>,
    text-align: center + horizon,
  )


  #pagebreak()
  #set page(flipped: false)
  === Описание JSON-схем
  #xlsx_tab(
    "/template/assets/tables/openapi_schemas.xlsx",
    columns: (auto, auto, 1fr, 2fr),
    caption: "Описание JSON-схем",
    text-align: center + horizon,
    label: <tab:openapi-schemas>,
  )

]
